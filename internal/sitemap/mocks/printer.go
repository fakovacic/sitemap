// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/sitemap/internal/sitemap"
	"sync"
)

// Ensure, that PrinterMock does implement sitemap.Printer.
// If this is not the case, regenerate this file with moq.
var _ sitemap.Printer = &PrinterMock{}

// PrinterMock is a mock implementation of sitemap.Printer.
//
// 	func TestSomethingThatUsesPrinter(t *testing.T) {
//
// 		// make and configure a mocked sitemap.Printer
// 		mockedPrinter := &PrinterMock{
// 			PrintFunc: func(contextMoqParam context.Context, pages []sitemap.Page, s string) error {
// 				panic("mock out the Print method")
// 			},
// 		}
//
// 		// use mockedPrinter in code that requires sitemap.Printer
// 		// and then make assertions.
//
// 	}
type PrinterMock struct {
	// PrintFunc mocks the Print method.
	PrintFunc func(contextMoqParam context.Context, pages []sitemap.Page, s string) error

	// calls tracks calls to the methods.
	calls struct {
		// Print holds details about calls to the Print method.
		Print []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Pages is the pages argument value.
			Pages []sitemap.Page
			// S is the s argument value.
			S string
		}
	}
	lockPrint sync.RWMutex
}

// Print calls PrintFunc.
func (mock *PrinterMock) Print(contextMoqParam context.Context, pages []sitemap.Page, s string) error {
	if mock.PrintFunc == nil {
		panic("PrinterMock.PrintFunc: method is nil but Printer.Print was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Pages           []sitemap.Page
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		Pages:           pages,
		S:               s,
	}
	mock.lockPrint.Lock()
	mock.calls.Print = append(mock.calls.Print, callInfo)
	mock.lockPrint.Unlock()
	return mock.PrintFunc(contextMoqParam, pages, s)
}

// PrintCalls gets all the calls that were made to Print.
// Check the length with:
//     len(mockedPrinter.PrintCalls())
func (mock *PrinterMock) PrintCalls() []struct {
	ContextMoqParam context.Context
	Pages           []sitemap.Page
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		Pages           []sitemap.Page
		S               string
	}
	mock.lockPrint.RLock()
	calls = mock.calls.Print
	mock.lockPrint.RUnlock()
	return calls
}

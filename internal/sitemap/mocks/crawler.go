// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/sitemap/internal/sitemap"
	"net/url"
	"sync"
)

// Ensure, that CrawlerMock does implement sitemap.Crawler.
// If this is not the case, regenerate this file with moq.
var _ sitemap.Crawler = &CrawlerMock{}

// CrawlerMock is a mock implementation of sitemap.Crawler.
//
// 	func TestSomethingThatUsesCrawler(t *testing.T) {
//
// 		// make and configure a mocked sitemap.Crawler
// 		mockedCrawler := &CrawlerMock{
// 			RequestFunc: func(contextMoqParam context.Context, uRL *url.URL) (string, bool, error) {
// 				panic("mock out the Request method")
// 			},
// 		}
//
// 		// use mockedCrawler in code that requires sitemap.Crawler
// 		// and then make assertions.
//
// 	}
type CrawlerMock struct {
	// RequestFunc mocks the Request method.
	RequestFunc func(contextMoqParam context.Context, uRL *url.URL) (string, bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// Request holds details about calls to the Request method.
		Request []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// URL is the uRL argument value.
			URL *url.URL
		}
	}
	lockRequest sync.RWMutex
}

// Request calls RequestFunc.
func (mock *CrawlerMock) Request(contextMoqParam context.Context, uRL *url.URL) (string, bool, error) {
	if mock.RequestFunc == nil {
		panic("CrawlerMock.RequestFunc: method is nil but Crawler.Request was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		URL             *url.URL
	}{
		ContextMoqParam: contextMoqParam,
		URL:             uRL,
	}
	mock.lockRequest.Lock()
	mock.calls.Request = append(mock.calls.Request, callInfo)
	mock.lockRequest.Unlock()
	return mock.RequestFunc(contextMoqParam, uRL)
}

// RequestCalls gets all the calls that were made to Request.
// Check the length with:
//     len(mockedCrawler.RequestCalls())
func (mock *CrawlerMock) RequestCalls() []struct {
	ContextMoqParam context.Context
	URL             *url.URL
} {
	var calls []struct {
		ContextMoqParam context.Context
		URL             *url.URL
	}
	mock.lockRequest.RLock()
	calls = mock.calls.Request
	mock.lockRequest.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/sitemap/internal/sitemap"
	"net/url"
	"sync"
)

// Ensure, that ParserMock does implement sitemap.Parser.
// If this is not the case, regenerate this file with moq.
var _ sitemap.Parser = &ParserMock{}

// ParserMock is a mock implementation of sitemap.Parser.
//
// 	func TestSomethingThatUsesParser(t *testing.T) {
//
// 		// make and configure a mocked sitemap.Parser
// 		mockedParser := &ParserMock{
// 			ParseFunc: func(contextMoqParam context.Context, s string) ([]sitemap.Page, error) {
// 				panic("mock out the Parse method")
// 			},
// 			SetBaseFunc: func(contextMoqParam context.Context, uRL *url.URL)  {
// 				panic("mock out the SetBase method")
// 			},
// 		}
//
// 		// use mockedParser in code that requires sitemap.Parser
// 		// and then make assertions.
//
// 	}
type ParserMock struct {
	// ParseFunc mocks the Parse method.
	ParseFunc func(contextMoqParam context.Context, s string) ([]sitemap.Page, error)

	// SetBaseFunc mocks the SetBase method.
	SetBaseFunc func(contextMoqParam context.Context, uRL *url.URL)

	// calls tracks calls to the methods.
	calls struct {
		// Parse holds details about calls to the Parse method.
		Parse []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// SetBase holds details about calls to the SetBase method.
		SetBase []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// URL is the uRL argument value.
			URL *url.URL
		}
	}
	lockParse   sync.RWMutex
	lockSetBase sync.RWMutex
}

// Parse calls ParseFunc.
func (mock *ParserMock) Parse(contextMoqParam context.Context, s string) ([]sitemap.Page, error) {
	if mock.ParseFunc == nil {
		panic("ParserMock.ParseFunc: method is nil but Parser.Parse was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockParse.Lock()
	mock.calls.Parse = append(mock.calls.Parse, callInfo)
	mock.lockParse.Unlock()
	return mock.ParseFunc(contextMoqParam, s)
}

// ParseCalls gets all the calls that were made to Parse.
// Check the length with:
//     len(mockedParser.ParseCalls())
func (mock *ParserMock) ParseCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockParse.RLock()
	calls = mock.calls.Parse
	mock.lockParse.RUnlock()
	return calls
}

// SetBase calls SetBaseFunc.
func (mock *ParserMock) SetBase(contextMoqParam context.Context, uRL *url.URL) {
	if mock.SetBaseFunc == nil {
		panic("ParserMock.SetBaseFunc: method is nil but Parser.SetBase was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		URL             *url.URL
	}{
		ContextMoqParam: contextMoqParam,
		URL:             uRL,
	}
	mock.lockSetBase.Lock()
	mock.calls.SetBase = append(mock.calls.SetBase, callInfo)
	mock.lockSetBase.Unlock()
	mock.SetBaseFunc(contextMoqParam, uRL)
}

// SetBaseCalls gets all the calls that were made to SetBase.
// Check the length with:
//     len(mockedParser.SetBaseCalls())
func (mock *ParserMock) SetBaseCalls() []struct {
	ContextMoqParam context.Context
	URL             *url.URL
} {
	var calls []struct {
		ContextMoqParam context.Context
		URL             *url.URL
	}
	mock.lockSetBase.RLock()
	calls = mock.calls.SetBase
	mock.lockSetBase.RUnlock()
	return calls
}

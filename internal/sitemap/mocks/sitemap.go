// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/fakovacic/sitemap/internal/sitemap"
	"net/url"
	"sync"
)

// Ensure, that SitemapMock does implement sitemap.Sitemap.
// If this is not the case, regenerate this file with moq.
var _ sitemap.Sitemap = &SitemapMock{}

// SitemapMock is a mock implementation of sitemap.Sitemap.
//
// 	func TestSomethingThatUsesSitemap(t *testing.T) {
//
// 		// make and configure a mocked sitemap.Sitemap
// 		mockedSitemap := &SitemapMock{
// 			CollectFunc: func(contextMoqParam context.Context, uRL *url.URL, n1 int, n2 int) error {
// 				panic("mock out the Collect method")
// 			},
// 			OutputFunc: func(contextMoqParam context.Context, s string) error {
// 				panic("mock out the Output method")
// 			},
// 			ValidateFunc: func(contextMoqParam context.Context, s string) (*url.URL, error) {
// 				panic("mock out the Validate method")
// 			},
// 		}
//
// 		// use mockedSitemap in code that requires sitemap.Sitemap
// 		// and then make assertions.
//
// 	}
type SitemapMock struct {
	// CollectFunc mocks the Collect method.
	CollectFunc func(contextMoqParam context.Context, uRL *url.URL, n1 int, n2 int) error

	// OutputFunc mocks the Output method.
	OutputFunc func(contextMoqParam context.Context, s string) error

	// ValidateFunc mocks the Validate method.
	ValidateFunc func(contextMoqParam context.Context, s string) (*url.URL, error)

	// calls tracks calls to the methods.
	calls struct {
		// Collect holds details about calls to the Collect method.
		Collect []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// URL is the uRL argument value.
			URL *url.URL
			// N1 is the n1 argument value.
			N1 int
			// N2 is the n2 argument value.
			N2 int
		}
		// Output holds details about calls to the Output method.
		Output []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// Validate holds details about calls to the Validate method.
		Validate []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
	}
	lockCollect  sync.RWMutex
	lockOutput   sync.RWMutex
	lockValidate sync.RWMutex
}

// Collect calls CollectFunc.
func (mock *SitemapMock) Collect(contextMoqParam context.Context, uRL *url.URL, n1 int, n2 int) error {
	if mock.CollectFunc == nil {
		panic("SitemapMock.CollectFunc: method is nil but Sitemap.Collect was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		URL             *url.URL
		N1              int
		N2              int
	}{
		ContextMoqParam: contextMoqParam,
		URL:             uRL,
		N1:              n1,
		N2:              n2,
	}
	mock.lockCollect.Lock()
	mock.calls.Collect = append(mock.calls.Collect, callInfo)
	mock.lockCollect.Unlock()
	return mock.CollectFunc(contextMoqParam, uRL, n1, n2)
}

// CollectCalls gets all the calls that were made to Collect.
// Check the length with:
//     len(mockedSitemap.CollectCalls())
func (mock *SitemapMock) CollectCalls() []struct {
	ContextMoqParam context.Context
	URL             *url.URL
	N1              int
	N2              int
} {
	var calls []struct {
		ContextMoqParam context.Context
		URL             *url.URL
		N1              int
		N2              int
	}
	mock.lockCollect.RLock()
	calls = mock.calls.Collect
	mock.lockCollect.RUnlock()
	return calls
}

// Output calls OutputFunc.
func (mock *SitemapMock) Output(contextMoqParam context.Context, s string) error {
	if mock.OutputFunc == nil {
		panic("SitemapMock.OutputFunc: method is nil but Sitemap.Output was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockOutput.Lock()
	mock.calls.Output = append(mock.calls.Output, callInfo)
	mock.lockOutput.Unlock()
	return mock.OutputFunc(contextMoqParam, s)
}

// OutputCalls gets all the calls that were made to Output.
// Check the length with:
//     len(mockedSitemap.OutputCalls())
func (mock *SitemapMock) OutputCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockOutput.RLock()
	calls = mock.calls.Output
	mock.lockOutput.RUnlock()
	return calls
}

// Validate calls ValidateFunc.
func (mock *SitemapMock) Validate(contextMoqParam context.Context, s string) (*url.URL, error) {
	if mock.ValidateFunc == nil {
		panic("SitemapMock.ValidateFunc: method is nil but Sitemap.Validate was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockValidate.Lock()
	mock.calls.Validate = append(mock.calls.Validate, callInfo)
	mock.lockValidate.Unlock()
	return mock.ValidateFunc(contextMoqParam, s)
}

// ValidateCalls gets all the calls that were made to Validate.
// Check the length with:
//     len(mockedSitemap.ValidateCalls())
func (mock *SitemapMock) ValidateCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockValidate.RLock()
	calls = mock.calls.Validate
	mock.lockValidate.RUnlock()
	return calls
}
